import random # Importerar att den ska kunna g√∂ra random 

words = [] # N√§mner ordet "words" s√• jag kan anv√§nda det senare.
file = open('secretwords.txt' , 'r') # √∂ppnar och l√§ses filen secretwords.txt
words = file.read().splitlines() # S√§ger att den bara ska l√§sa varje rad som ett objekt.
secret_word = random.choice(words) # V√§ljer ut ett random ord.

# Printar ut spelet!
print("---------------------------------------------------------")
print("ùêí ùêä ùêë ùêà ùêï  ùêÅ ùêÄ ùêë ùêÄ  ùêå ùêÑ ùêÉ  ùêí ùêå √Ö  ùêÅ ùêé ùêä ùêí ùêì √Ñ ùêï ùêÑ ùêë")
print("")
print("")
print("‚Ä¢._.‚Ä¢‚Ä¢¬¥¬Ø``‚Ä¢.¬∏¬∏.‚Ä¢`ùìó √§ ùì∑ ùì∞ ùì™  ùìñ ùìæ ùì´ ùì´ ùìÆ`‚Ä¢.¬∏¬∏.‚Ä¢¬¥¬¥¬Ø`‚Ä¢‚Ä¢._.‚Ä¢")
print("")
print("")
print("programmet skrivet av: ùêøùìäùí∏ùí∂ùìà ùêµùí∂ùìäùìÉùìàùëîùí∂ùí∂ùìáùíπ")
print("---------------------------------------------------------")
print("")
print("")

def get_guess(): # Startar en funktion.

  dashes = "-" * len(secret_word) # L√§gger _ p√• alla bokst√§ver i g√∂mda ordet
  left = len(secret_word) #  s√§tter "left" till hur m√•nga bokst√§ver det hemliga ordet har.
  guesses_left = 10 # Ger spelaren 10 liv
  used_letters = [] # s√§tter namnet s√• den kan anv√§ndas senare som string


  # En loop som kollar om du har slut p√• gissningar eller ifall _ √§r lika som ordet
  while guesses_left > 0 and not dashes == secret_word:

    print(dashes) # Skriver ut dashes d√§r bokst√§verna √§r g√∂mda.
    print("Bokst√§ver gissade: ", (used_letters)) # Skriver ut vilka bokst√§ver man gissat p√•.
    print ("Liv kvar: ", str(guesses_left)) # Skriver ut hut m√•nga gissningar man har kvar

    # fr√•gar spelaren efter en gissning
    guess = input("Gissa:") # Skriver ut en fr√•ga
    used_letters.append(guess) # Svaret man skriver byts ut ifall det st√§mmer med secret_word.

    if len(guess) != 1: # Ifall man inte skriver 1 bokstav s√• k√∂r den det under.
      # Printar ut att man m√•ste skriva en bokstav.
      print("") 
      print ("Din bokstav m√•ste vara en bokstav!")

    # Ifall man gissar r√§tt s√• printar den det och sedan byter ut _ till bokstaven
    elif guess in secret_word:
      print("")
      print ("Du gissade en bokstav r√§tt!")
      dashes = update_dashes(secret_word, dashes, guess) # Uppdaterar dashes s√• man kan se vart bokstaven var i ordet.


    # Om spelaren gissar fel s√• s√§ger programmet det och sedan tar bort ett liv fr√•n spelarn
    else:
      print("")
      print ("Du gissade fel.")
      guesses_left -= 1 # Tar -1 liv fr√•n guess_left.

    if guesses_left < 1: # N√§r man har 0 guesses_left s√• printar den ut vad ordet var.
      print ("Du f√∂rlora, ordet var: " + str(secret_word))

  # Om _ √§r lika som ordet s√• har spelaren vunnit. Den printar ocks√• ut vad ordet var.
  else:
    print ("Grattis! du fick r√§tt ord: " + str(secret_word))

# Den h√§r funktionen uppdaterar alla _ genom att byta ut _ med bokst√§verna som spelaren gissar. Ifall den gissar r√§tt bokstav allts√•
def update_dashes(secret, cur_dash, rec_guess):
  result = ""

  for i in range(len(secret)):
    if secret[i] == rec_guess:
      # L√§gger till liv ifall spelaren gissar r√§tt bokstav
      result = result + rec_guess

    else:
      # L√§gger till _ i resultatet ifall bokstaven inte passar resultatet.
      result = result + cur_dash[i]

  return result

get_guess()
